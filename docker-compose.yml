version: '3.8'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: zookeeper
    command: >
      bash -c "rm -rf /var/lib/zookeeper/data/* /var/lib/zookeeper/log/* && /etc/confluent/docker/run"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    volumes:
      - zk_data:/var/lib/zookeeper/data
    restart: unless-stopped


#*****************************************************************************************************************************


  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka
    command: >
      bash -c "rm -rf /var/lib/kafka/data/* && /etc/confluent/docker/run"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    ports:
      - "9092:9092"
    volumes:
      - kafka_data:/var/lib/kafka/data
    restart: unless-stopped


#*****************************************************************************************************************************
    

  postgres:
    image: postgres:16-alpine
    container_name: postgres
    env_file: .env
    environment:
      POSTGRES_USER: comment_user
      POSTGRES_PASSWORD: secretpass
      POSTGRES_DB: commentsdb
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data


#*****************************************************************************************************************************

  redis:
    image: redis:7-alpine
    container_name: redis
    command: ["redis-server","--appendonly","yes"]
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 2s
      retries: 5

#*****************************************************************************************************************************


  sentiment:
    build:
      context: .
      dockerfile: Dockerfile.sentiment    # bu dosya proje kökünde olmalı
    container_name: sentiment
    env_file: .env
    ports:
      - "50051:50051"
    depends_on:
      - zookeeper
      - kafka

#*****************************************************************************************************************************


  api:
    build:
      context: .
      dockerfile: Dockerfile.api
    container_name: api
    env_file: .env
    ports:
      - "8000:8000"
    depends_on:
      - postgres
      - redis
      - kafka
      - sentiment
    restart: unless-stopped


#*****************************************************************************************************************************


  producer:
    build:
      context: .
      dockerfile: Dockerfile.worker
    container_name: producer
    env_file: .env
    depends_on:
      - kafka

#*****************************************************************************************************************************



  consumer:
    build:
      context: .
      dockerfile: Dockerfile.worker
    container_name: consumer
    env_file: .env
    depends_on:
      kafka:
        condition: service_started
      sentiment:
        condition: service_started
      redis:
        condition: service_healthy
      postgres:
        condition: service_started
    command: ["src.presentation.cli.run_consumer"]
    restart: unless-stopped

#*****************************************************************************************************************************

volumes:
  pgdata:
  kafka_data:
  zk_data:
